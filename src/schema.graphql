# import UserOrderByInput, OrderOrderByInput, RaffleOrderByInput, RaffleWhereInput from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  me: User!
  orders(query: String, first: Int, skip: Int, after: String): [Order!]!
  myOrders(query: String, first: Int, skip: Int, after: String): [Order!]!
  raffles(
    query: RaffleWhereInput
    first: Int
    skip: Int
    after: String
  ): [Raffle!]!
  myRaffles(
    query: RaffleWhereInput
    first: Int
    skip: Int
    after: String
  ): [Raffle!]!
  prizes: [Prize!]!
  winners: [Winner!]!
}

type Mutation {
  loginUser(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
  createOrder(data: CreateOrderInput): Order!
  updateOrder(data: UpdateOrderInput): Order!
  deleteOrder: Order!
  createRaffle(data: CreateRaffleInput): Raffle!
  updateRaffle(data: UpdateRaffleInput): Raffle!
  deleteRaffle: Raffle!
  createPrize(data: CreatePrizeInput): Prize!
  updatePrize(data: UpdatePrizeInput): Prize!
  deletePrize: Prize!
  createUserRaffle(data: CreateUserRaffleInput): UserRaffle!
  updateUserRaffle(data: UpdateUserRaffleInput): UserRaffle!
  deleteUserRaffle: UserRaffle!
}

# type Subscription {
# }

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  info: String!
  password: String!
}

type User {
  id: ID!
  cpf: String!
  email: String
  phoneNumber: String!
  password: String!
  whatsApp: String
  fName: String
  lName: String
  siteRole: SiteRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateUserInput {
  cpf: String!
  email: String!
  password: String!
  phoneNumber: String
  whatsApp: String
  fName: String
  lName: String
}

input UpdateUserInput {
  cpf: String
  email: String
  phoneNumber: String
  password: String
  whatsApp: String
  fName: String
  lName: String
}

type Raffle {
  id: ID!
  size: Int!
  drawDate: String!
  price: Float!
  isPaid: Boolean!
  totalCost: Float!
  orders: [Order!]!
  admins: [UserRaffle!]
  prizes: [Prize!]!
  siteOrder: SiteOrder!
  createdAt: String!
  updatedAt: String!
}

input CreateRaffleInput {
  size: Int!
  drawDate: String!
  price: Float!
  #admins: [UserRaffle!]
  prizes: CreatePrizeInput!
}

input UpdateRaffleInput {
  drawDate: String
}

type Prize {
  id: ID!
  prizeNumber: Int!
  prize: String!
  description: String
  raffle: Raffle!
}

input CreatePrizeInput {
  prizeNumber: Int!
  prize: String!
  description: String
}

input UpdatePrizeInput {
  prizeNumber: Int
  prize: String
  description: String
}

type UserRaffle {
  id: ID!
  user: User!
  raffle: Raffle!
  raffleRole: RaffleRole!
}

input CreateUserRaffleInput {
  user: ID!
  raffle: ID!
  raffleRole: RaffleRole!
}

input UpdateUserRaffleInput {
  user: ID!
  raffle: ID!
  raffleRole: RaffleRole
}

type Order {
  id: ID!
  raffleNumber: Int!
  paymentMethod: PaymentMethod!
  buyer: User!
  winner: [Winner!]!
  raffle: Raffle!
  status: OrderStatus!
  createdAt: String!
  updatedAt: String!
}

input CreateOrderInput {
  raffleNumber: Int!
  paymentMethod: PaymentMethod!
  raffle: ID!
  status: OrderStatus!
}

input UpdateOrderInput {
  paymentMethod: PaymentMethod
  raffle: ID!
  status: OrderStatus
}

type Winner {
  id: ID!
  drawNumber: Int!
  order: Order!
}

type SiteOrder {
  id: ID!
  purchaseDate: String!
  raffle: Raffle!
}

input CreateSiteOrderInput {
  id: ID!
}

enum SiteRole {
  ADMIN
  USER
}

enum RaffleRole {
  ADMIN
  VENDEDOR
}

enum PaymentMethod {
  TRANSFERENCIA
  DINHEIRO
  PICPAY
  MERCADOPAGO
  PAYPAL
}

enum OrderStatus {
  PAGO
  RESERVADO
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
